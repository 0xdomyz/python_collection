{
    // Place your snippets for python here. Each snippet is defined under a snippet name and has a prefix, body and 
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
    // same ids are connected.
    // general python
    "iana": {
        "prefix": "iana",
        "body": [
            "import numpy as np",
            "import pandas as pd",
            "import matplotlib.pyplot as plt",
            "import matplotlib as mpl",
        ],
    },
    "istats": {
        "prefix": "istats",
        "body": [
            "import matplotlib.pyplot as plt",
            "import matplotlib as mpl",
            "import numpy as np",
            "import pandas as pd",
            "import statsmodels.api as sm",
            "from scipy import stats",
        ],
    },
    // pd related
    "pstr": {
        "prefix": "pstr",
        "body": [
            "print($1.to_string())",
        ],
    },
    "phstr": {
        "prefix": "phstr",
        "body": [
            "print($1.head().to_string())",
        ],
    },
    "info": {
        "prefix": "info",
        "body": [
            "# vertical info view",
            "_ = pd.concat([$1.head(1).T, $1.dtypes, $1.isna().sum()], axis=1)",
            "_.columns = ['example_value', 'dtypes', 'n_null']",
            "_",
        ],
    },
    "loc": {
        "prefix": "loc",
        "body": [
            "$1.loc[lambda x:x['$2']$3, :]",
        ],
    },
    "qry": {
        "prefix": "qry",
        "body": [
            "$1.query('$2')",
        ],
    },
    "grpdict": {
        "prefix": "grpdict",
        "body": [
            "$1.groupby(\"$2\", dropna=False, observed=False).agg(",
            "    {\"$3\": [\"size\", \"sum\", \"mean\"]}",
            ")",
        ],
    },
    "grp2unstack": {
        "prefix": "grp2unstack",
        "body": [
            "$1.groupby([\"$2\", \"$3\"], dropna=False, observed=False)[\"$4\"].agg(",
            "    lambda x: (len(x), float(x.mean().round(2)))",
            ").unstack()",
        ],
    },
    "grpargs": {
        "prefix": "grpargs",
        "body": [
            "$1.groupby([\"$2\", \"$3\"], dropna=False, observed=False).agg(",
            "    **{",
            "        \"n\": (\"$2\", \"size\"),",
            "        \"$4_rate\": (\"$4\", \"mean\"),",
            "    }",
            ")",
        ],
    },
    //mpl related
    "figax": {
        "prefix": "figax",
        "body": [
            "fig, ax = plt.subplots(1, 1, figsize=(12, 6))",
        ],
    },
    "mplfull": {
        "prefix": "mplfull",
        "body": [
            "fig, ax = plt.subplots(figsize=(12, 6))",
            "",
            "x_ticks = $1['$2'].astype(str)",
            "",
            "ax.plot(x_ticks, $1['$3'], alpha=0.8, marker='x', color='red', label= $1['$3'].name)",
            "ax.plot(x_ticks, $1['$4'], alpha=0.8, marker='o', color='green', label= $1['$4'].name)",
            "",
            "ax.set_title(f\"$5\", fontsize=15, fontweight='bold')",
            "",
            "ax.set_xticks(x_ticks)",
            "ax.set_xticklabels(x_ticks, rotation=45)",
            "ax.set_xlabel(x_ticks.name, loc=\"center\")",
            "",
            "ax.set_ylabel(f\"$6\", loc=\"center\")",
            "ax.yaxis.set_major_locator(mpl.ticker.MaxNLocator(nbins=10))",
            "ax.yaxis.set_major_formatter(mpl.ticker.PercentFormatter(1.0, decimals=0))",
            "ax.yaxis.set_minor_locator(mpl.ticker.AutoMinorLocator(2))",
            "ax.set_ylim(0, 1)",
            "",
            "ax.grid(True, linestyle='--', alpha=0.5)",
            "ax.spines['top'].set_visible(False)",
            "ax.spines['right'].set_visible(False)",
            "",
            "ax.legend(loc='upper left', fontsize=10, frameon=False)",
            "",
            "plt.tight_layout()",
        ],
    },
}