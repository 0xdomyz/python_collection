{
    // db via sqlalchemy related
    "dbsetup": {
        "prefix": "dbsetup",
        "body": [
            "import sqlalchemy as sa",
            "import pandas as pd",
            "import os",
            "",
            "# add run method to engine",
            "def run(self: sa.engine.Engine, sql:str) -> pd.DataFrame | None:",
            "    with self.begin() as conn:",
            "        res = conn.execute(sa.text(sql))",
            "        if res.returns_rows:",
            "            return pd.DataFrame(res.all(), columns=res.keys())",
            "",
            "sa.engine.Engine.run = run",
            "",
            "connection_string = f\"$1://$2:{os.environ['password']}@$3\"",
            "eng = sa.create_engine(connection_string)",
        ],
    },
    "dbrun1": {
        "prefix": "dbrun1",
        "body": [
            "_ = eng.run(f\"select * from $1 where $2 = '$3'\")",
            "_",
        ],
    },
    "dbqry": {
        "prefix": "dbqry",
        "body": [
            "qry = f\"\"\"",
            "select",
            "    *",
            "from $1",
            "where $2 = '$3'",
            "\"\"\"",
            "",
            "df = eng.run(qry)",
            "df",
        ],
    },
    "dbhead": {
        "prefix": "dbhead",
        "body": [
            "_ = eng.run(\"select top 5 * from $1\")",
            "print(_.head().to_string())",
        ],
    },
    "dbcount1": {
        "prefix": "dbcount1",
        "body": [
            "eng.run(\"select count(*) as n from $1\").iloc[0,0]",
        ],
    },
    "dbdrop": {
        "prefix": "dbdrop",
        "body": [
            "try:",
            "    eng.run(\"drop table $1\")",
            "except Exception as e:",
            "    print(f\"Table does not exist.\")",
        ],
    },
    "dbgrp": {
        "prefix": "dbgrp",
        "body": [
            "qry = f\"\"\"",
            "select",
            "    $1,",
            "    $2,",
            "    count(1) as n,",
            "    sum(exp) as exp",
            "from $3",
            "where infokey = 'Version'",
            "group by 1,2",
            "order by 1,2",
            "\"\"\"",
            "",
            "df = eng.run(qry)",
            "df",
        ],
    },
    "dbctbl": {
        "prefix": "dbctbl",
        "body": [
            "tbl = \"$1\"",
            "",
            "try:",
            "    eng.run(f\"drop table {tbl}\")",
            "except Exception as e:",
            "    pass",
            "",
            "_ = eng.run(",
            "f\"\"\"",
            "create table {tbl} as (",
            "    select *",
            "    from $2",
            ") with data;",
            "\"\"\"",
            ")",
            "",
            "eng.run(f\"select count(*) from {tbl}\").iloc[0, 0]",
        ],
    },
    // teradata sql via sqlalchemy related
    "tdsetup": {
        "prefix": "tdsetup",
        "body": [
            "import sqlalchemy as alc",
            "import pandas as pd",
            "import os",
            "",
            "# add run method to engine",
            "def run(self: alc.engine.Engine, sql:str) -> pd.DataFrame | None:",
            "    with self.begin() as conn:",
            "        res = conn.execute(alc.text(sql))",
            "        if res.returns_rows:",
            "            return pd.DataFrame(res.all(), columns=res.keys())",
            "",
            "alc.engine.Engine.run = run",
            "",
            "connection_string = f\"teradatasql://$1:{os.environ['password']}@$2\"",
            "eng = alc.create_engine(connection_string)",
        ],
    },
}